I"H	<p>게임의 성능은 게임의 콘텐츠만큼 중요하다. 게임 내 콘텐츠를 아무리 잘 준비해도 프레임 드롭과 같은 현상이 자주 생기면 유저의 만족도가 떨어지고 게임에 관심을 갖던 유저도 금방 떠나거나 낮은 별점을 줄 수도 있다. 
<br /><br />
유니티로 모바일 게임을 만들다보면, 아무래도 PC 게임을 만들 때보다 성능 문제에 더 자주 직면하게 된다. 
<br /><br />
필자의 경우 그래도 CPU나 RAM 문제는 처음부터 인식을 하면서 게임을 만들었었다.
<br /><br />
그래서 일단 테스트 중에 프레임 드롭같은 현상이 생기면 다음과 같은 대처를 했다. 
<br /></p>
<blockquote>
  <ul>
    <li>불필요한 코드 줄이기 (너무 당연한..?)
      <ul>
        <li>특히, Update, FixedUpdate, LateUpdate 등은 그 내부에 아무 코드도 들어있지 않아도 게임 실행 중에 계속 작동되기 때문에, 내부에 아무 코드도 넣지 않을 것이라면 아예 지우는 게 낫다.</li>
      </ul>
    </li>
    <li>이미지 에셋 품질 낮추기
      <ul>
        <li>이미지 에셋 품질이 높다면 아무래도 RAM을 많이 차지하게 될 것이다.</li>
      </ul>
    </li>
    <li>FixedUpdate의 TimeStep 높여보기
      <ul>
        <li>FixedUpdate의 timeStep은 기본적으로 0.02로 맞춰져 있다. (참고로 이 timestep은 Edit&gt;Project Settings&gt;Time에서 수정할 수 있다) 
<br />
Timestep이 0.02로 설정되어 있다면 FixedUpdate의 코드가 1초에 50번 실행된다. FixedUpdate에는 주로 절대 생략되어서는 안 되는 물리 연산 코드 등을 넣는데, 예를 들면 중력에 따른 속도 조정이나 플레이어의 비자발적인 움직임 처리 등을 넣는다. 그런데 FixedUpdate의 기본 timestep이 0.02이다 보니, 모든 물리 현상이 50fps로 보이게 되는데, 나는 물리 현상도 60fps로 만드는 것에 욕심이 생겨서 timestep을 0.016667로 바꾸고 게임을 만들었다. 이는 당연히 1초에 열 번 더 연산할 거리를 만들어주므로, 
<br /></li>
      </ul>
    </li>
  </ul>
</blockquote>

<p><br />
그런데 위의 해결책을 실행해봤을 때 프레임 드롭 문제가 해결되면 참 좋았겠지만.. 그렇지 않았다. 위의 해결책들을 실행했어도</p>
:ET